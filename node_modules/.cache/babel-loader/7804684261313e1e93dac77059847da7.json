{"ast":null,"code":"var _jsxFileName = \"/Users/johnli/Documents/meetup_projects/shuffle-time2/front_end/src/components/ShuffleTimeCardContainer.js\";\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport ShuffleTimeCards from './ShuffleTimeCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShuffleTimeCardContainer = props => {\n  const {\n    tableSeating\n  } = props;\n\n  function createTableSlots() {\n    let rows = [];\n    let innerRow = [];\n    let tableMapLength = tableMapping.length;\n    let foreignerList = Array.from({\n      length: foreignerNumber\n    }, (v, k) => k + 1);\n    let japaneseList = Array.from({\n      length: japaneseNumber\n    }, (v, k) => k + 1);\n    let colNumber = Math.floor(tableMapLength / 5);\n    let japaneseArray = [];\n    let foreignerArray = [];\n    let randomNumber = 0;\n    const tableNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    let tableIterator = 0;\n    console.log();\n\n    for (let i = 0; i < tableMapLength; ++i) {\n      for (let j = 0; j < tableMapping[i].japanese; ++j) {\n        randomNumber = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n        console.log(randomNumber);\n        japaneseArray.push(japaneseList[randomNumber]);\n        japaneseList.splice(randomNumber, 1);\n      }\n\n      for (let j = 0; j < tableMapping[i].foreigner; ++j) {\n        randomNumber = Math.floor(Math.random() * (foreignerList.length - 1 + 1)) + 0;\n        console.log(randomNumber);\n        foreignerArray.push(foreignerList[randomNumber]);\n        foreignerList.splice(randomNumber, 1);\n      }\n\n      innerRow.push( /*#__PURE__*/_jsxDEV(Col, {\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(ShuffleTimeCards, {\n          japaneseArray: japaneseArray,\n          foreignerArray: foreignerArray,\n          tableName: tableNames[tableIterator]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this));\n      japaneseArray = [];\n      foreignerArray = [];\n      tableIterator++;\n    }\n\n    rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      children: [\" \", innerRow, \" + \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this));\n    return rows;\n  }\n\n  function createTableSeating() {\n    let innerRow = [];\n    let rows = [];\n\n    for (const tableName in tableSeating) {\n      innerRow.push( /*#__PURE__*/_jsxDEV(Col, {\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(ShuffleTimeCards, {\n          tableEntries: tableSeating[key],\n          tableName: tableName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this));\n    }\n\n    rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      children: [\" \", innerRow, \" + \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: createTableSeating()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ShuffleTimeCardContainer;\nexport default ShuffleTimeCardContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShuffleTimeCardContainer\");","map":{"version":3,"sources":["/Users/johnli/Documents/meetup_projects/shuffle-time2/front_end/src/components/ShuffleTimeCardContainer.js"],"names":["Container","ListGroup","Row","Col","Card","ShuffleTimeCards","ShuffleTimeCardContainer","props","tableSeating","createTableSlots","rows","innerRow","tableMapLength","tableMapping","length","foreignerList","Array","from","foreignerNumber","v","k","japaneseList","japaneseNumber","colNumber","Math","floor","japaneseArray","foreignerArray","randomNumber","tableNames","tableIterator","console","log","i","j","japanese","random","push","splice","foreigner","createTableSeating","tableName","key"],"mappings":"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","sourcesContent":["import Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';  \nimport Card from 'react-bootstrap/Card';\nimport ShuffleTimeCards from './ShuffleTimeCards';\n\nconst ShuffleTimeCardContainer = (props) => {\n    \n    const { tableSeating } = props;\n\n    function createTableSlots() {\n        let rows = [];\n        let innerRow = [];\n        let tableMapLength = tableMapping.length;\n        let foreignerList = Array.from({length: foreignerNumber}, (v, k) => k+1); \n        let japaneseList = Array.from({length: japaneseNumber}, (v, k) => k+1); \n        let colNumber = Math.floor(tableMapLength / 5);\n        let japaneseArray = [];\n        let foreignerArray = [];\n        let randomNumber = 0;\n\n        const tableNames = [\n            \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\n        ]\n        let tableIterator = 0; \n        console.log()\n        for (let i = 0; i < tableMapLength; ++i) {\n            for (let j = 0; j < tableMapping[i].japanese; ++j) {\n                randomNumber = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n                console.log(randomNumber);\n                japaneseArray.push(japaneseList[randomNumber]);\n                japaneseList.splice(randomNumber, 1);\n            }\n            for (let j = 0; j < tableMapping[i].foreigner; ++j) {\n                randomNumber = Math.floor(Math.random() * (foreignerList.length - 1 + 1)) + 0;\n                console.log(randomNumber);\n                foreignerArray.push(foreignerList[randomNumber]);\n                foreignerList.splice(randomNumber, 1);\n            }\n\n            innerRow.push(\n                <Col xs={3}>\n                    <ShuffleTimeCards japaneseArray={japaneseArray} foreignerArray={foreignerArray} tableName={tableNames[tableIterator]} /> \n                </Col>        \n            );\n\n            japaneseArray = [];\n            foreignerArray = [];\n            tableIterator++;  \n\n        }\n\n        rows.push(<Row> {innerRow} + </Row>);\n\n        return rows;\n    }\n\n    function createTableSeating() {\n        let innerRow = [];\n        let rows = [];\n\n        for(const tableName in tableSeating) {\n            innerRow.push(\n                <Col xs={3}>\n                    <ShuffleTimeCards tableEntries={tableSeating[key]} tableName={tableName} /> \n                </Col>        \n            );\n        }\n\n        rows.push(<Row> {innerRow} + </Row>)\n    }\n\n    return (\n        <div>\n            { createTableSeating() }\n        </div>\n    )\n};\n\nexport default ShuffleTimeCardContainer;\n"]},"metadata":{},"sourceType":"module"}