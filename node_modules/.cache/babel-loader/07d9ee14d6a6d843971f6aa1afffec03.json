{"ast":null,"code":"var _jsxFileName = \"/Users/johnli/Documents/meetup_projects/shuffle-time/src/components/ShuffleTimeCardContainer.js\";\nimport Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport ShuffleTimeCards from './ShuffleTimeCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShuffleTimeCardContainer = props => {\n  const {\n    tableMapping,\n    foreignerNumber,\n    japaneseNumber\n  } = props;\n\n  function createTableSlots() {\n    let rows = [];\n    let innerRow = [];\n    let tableMapLength = tableMapping.length;\n    let foreignerList = Array.from({\n      length: foreignerNumber\n    }, (v, k) => k + 1);\n    let japaneseList = Array.from({\n      length: japaneseNumber\n    }, (v, k) => k + 1);\n    let colNumber = Math.floor(tableMapLength / 5);\n    let japaneseArray = [];\n    let foreignerArray = [];\n    let randomNumber = 0;\n    const tableNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    let tableIterator = 0;\n    console.log(colNumber);\n\n    for (let i = 0; i < tableMapLength; ++i) {\n      for (let j = 0; j < tableMapping[i].japanese; ++j) {\n        random = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n        japaneseArray.push(randomNumber);\n        japaneseList.splice(randomNumber);\n        console.log(randomNumber);\n      }\n\n      for (let j = 0; j < tableMapping[i].foreigner; ++j) {\n        random = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n        japaneseArray.push(randomNumber);\n        japaneseList.splice(randomNumber);\n        console.log(randomNumber);\n      }\n\n      innerRow.push( /*#__PURE__*/_jsxDEV(Col, {\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(ShuffleTimeCards, {\n          tableName: tableNames[tableIterator],\n          tableMapping: tableMapping,\n          foreignerNumber: foreignerNumber,\n          japaneseNumber: japaneseNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this));\n      tableIterator++;\n    }\n\n    rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      children: [\" \", innerRow, \" + \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 19\n    }, this));\n    console.log(rows);\n    return rows;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: createTableSlots()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ShuffleTimeCardContainer;\nexport default ShuffleTimeCardContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShuffleTimeCardContainer\");","map":{"version":3,"sources":["/Users/johnli/Documents/meetup_projects/shuffle-time/src/components/ShuffleTimeCardContainer.js"],"names":["Container","ListGroup","Row","Col","Card","ShuffleTimeCards","ShuffleTimeCardContainer","props","tableMapping","foreignerNumber","japaneseNumber","createTableSlots","rows","innerRow","tableMapLength","length","foreignerList","Array","from","v","k","japaneseList","colNumber","Math","floor","japaneseArray","foreignerArray","randomNumber","tableNames","tableIterator","console","log","i","j","japanese","random","push","splice","foreigner"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,2BAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAEA,MAAMC,wBAAwB,GAAIC,KAAD,IAAW;AAExC,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,MAAoDH,KAA1D;;AAEA,WAASI,gBAAT,GAA4B;AACxB,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,cAAc,GAAGN,YAAY,CAACO,MAAlC;AACA,QAAIC,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAW;AAACH,MAAAA,MAAM,EAAEN;AAAT,KAAX,EAAsC,CAACU,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAC,CAAlD,CAApB;AACA,QAAIC,YAAY,GAAGJ,KAAK,CAACC,IAAN,CAAW;AAACH,MAAAA,MAAM,EAAEL;AAAT,KAAX,EAAqC,CAACS,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAC,CAAjD,CAAnB;AACA,QAAIE,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWV,cAAc,GAAG,CAA5B,CAAhB;AACA,QAAIW,aAAa,GAAG,EAApB;AACA,QAAIC,cAAc,GAAG,EAArB;AACA,QAAIC,YAAY,GAAG,CAAnB;AAEA,UAAMC,UAAU,GAAG,CACf,GADe,EACV,GADU,EACL,GADK,EACA,GADA,EACK,GADL,EACU,GADV,EACe,GADf,EACoB,GADpB,EACyB,GADzB,EAC8B,GAD9B,CAAnB;AAGA,QAAIC,aAAa,GAAG,CAApB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;;AAEA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,cAApB,EAAoC,EAAEkB,CAAtC,EAAyC;AACrC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,YAAY,CAACwB,CAAD,CAAZ,CAAgBE,QAApC,EAA8C,EAAED,CAAhD,EAAmD;AAC/CE,QAAAA,MAAM,GAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACY,MAAL,MAAiBd,YAAY,CAACN,MAAb,GAAsB,CAAtB,GAA0B,CAA3C,CAAX,IAA4D,CAArE;AACAU,QAAAA,aAAa,CAACW,IAAd,CAAmBT,YAAnB;AACAN,QAAAA,YAAY,CAACgB,MAAb,CAAoBV,YAApB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACH;;AACD,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,YAAY,CAACwB,CAAD,CAAZ,CAAgBM,SAApC,EAA+C,EAAEL,CAAjD,EAAoD;AAChDE,QAAAA,MAAM,GAAGZ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACY,MAAL,MAAiBd,YAAY,CAACN,MAAb,GAAsB,CAAtB,GAA0B,CAA3C,CAAX,IAA4D,CAArE;AACAU,QAAAA,aAAa,CAACW,IAAd,CAAmBT,YAAnB;AACAN,QAAAA,YAAY,CAACgB,MAAb,CAAoBV,YAApB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AACH;;AACDd,MAAAA,QAAQ,CAACuB,IAAT,eACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAA,+BACI,QAAC,gBAAD;AAAkB,UAAA,SAAS,EAAER,UAAU,CAACC,aAAD,CAAvC;AAAwD,UAAA,YAAY,EAAErB,YAAtE;AAAoF,UAAA,eAAe,EAAEC,eAArG;AAAsH,UAAA,cAAc,EAAEC;AAAtI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKAmB,MAAAA,aAAa;AAEhB;;AAEDjB,IAAAA,IAAI,CAACwB,IAAL,eAAU,QAAC,GAAD;AAAA,sBAAOvB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AAEAiB,IAAAA,OAAO,CAACC,GAAR,CAAYnB,IAAZ;AACA,WAAOA,IAAP;AACH;;AAED,sBACI;AAAA,cACMD,gBAAgB;AADtB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvDD;;KAAML,wB;AAyDN,eAAeA,wBAAf","sourcesContent":["import Container from 'react-bootstrap/Container';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';  \nimport Card from 'react-bootstrap/Card';\nimport ShuffleTimeCards from './ShuffleTimeCards';\n\nconst ShuffleTimeCardContainer = (props) => {\n    \n    const { tableMapping, foreignerNumber, japaneseNumber } = props;\n\n    function createTableSlots() {\n        let rows = [];\n        let innerRow = [];\n        let tableMapLength = tableMapping.length;\n        let foreignerList = Array.from({length: foreignerNumber}, (v, k) => k+1); \n        let japaneseList = Array.from({length: japaneseNumber}, (v, k) => k+1); \n        let colNumber = Math.floor(tableMapLength / 5);\n        let japaneseArray = [];\n        let foreignerArray = [];\n        let randomNumber = 0;\n\n        const tableNames = [\n            \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\n        ]\n        let tableIterator = 0; \n\n        console.log(colNumber);\n\n        for (let i = 0; i < tableMapLength; ++i) {\n            for (let j = 0; j < tableMapping[i].japanese; ++j) {\n                random = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n                japaneseArray.push(randomNumber);\n                japaneseList.splice(randomNumber);\n                console.log(randomNumber);\n            }\n            for (let j = 0; j < tableMapping[i].foreigner; ++j) {\n                random = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n                japaneseArray.push(randomNumber);\n                japaneseList.splice(randomNumber);\n                console.log(randomNumber);\n            }\n            innerRow.push(\n                <Col xs={3}>\n                    <ShuffleTimeCards tableName={tableNames[tableIterator]} tableMapping={tableMapping} foreignerNumber={foreignerNumber} japaneseNumber={japaneseNumber} /> \n                </Col>        \n            );\n            tableIterator++;  \n\n        }\n\n        rows.push(<Row> {innerRow} + </Row>);\n\n        console.log(rows);\n        return rows;\n    }\n\n    return (\n        <div>\n            { createTableSlots() }\n        </div>\n    )\n};\n\nexport default ShuffleTimeCardContainer;\n"]},"metadata":{},"sourceType":"module"}