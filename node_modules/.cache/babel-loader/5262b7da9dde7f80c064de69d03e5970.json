{"ast":null,"code":"var _jsxFileName = \"/Users/johnli/Documents/meetup_projects/shuffle-time2/front_end/src/components/ShuffleTimeContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ShuffleTimeList from './ShuffleTimeList';\nimport ShuffleTimeDropdown from './ShuffleTimeDropdown';\nimport ShuffleTimeCardContainer from './ShuffleTimeCardContainer';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport '../styles/ShuffleTimeContainer.css';\nimport { db } from '../firebase/fbConfig.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShuffleTimeContainer = props => {\n  _s();\n\n  const [japaneseNumber, setJapaneseNumber] = useState(0);\n  const [foreignerNumber, setForeignerNumber] = useState(0);\n  const [tableNumber, setTableNumber] = useState(0);\n  const [tableMapping, setTableMapping] = useState(0);\n  const [tableSeating, setTableSeating] = useState(0); // const [finalList, setFinalList] = useState([]);\n  // const [editMode, setEditMode] = useState(false);\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  useEffect(() => {\n    db.collection(\"shuffle\").doc(\"shuffle-time-table\").get().then(doc => {\n      console.log(doc.data().json);\n      let newJson = doc.data();\n\n      if (newJson === \"\") {} else {\n        let newTableSeatings = JSON.parse(newJson);\n        console.log(newTableSeatings);\n      }\n    });\n  }, []); //check if errorMessage is not empty\n\n  function checkErrorMessage() {\n    return errorMessage ? true : false;\n  }\n\n  function handleTableGeneration(e) {\n    e.preventDefault();\n    let tempForeignerList = [];\n    tempForeignerList.length = foreignerNumber;\n    let tempJapaneseList = [];\n    tempJapaneseList.length = japaneseNumber;\n    let tempTableList = [];\n    tempTableList.length = 0;\n    let finalList = [];\n    finalList.length = tempTableList.length;\n    let listMapping = [];\n    let foreignerPerTable = Math.floor(foreignerNumber / tableNumber);\n    let foreignerLeftOver = foreignerNumber % tableNumber;\n    let japanesePerTable = Math.floor(japaneseNumber / tableNumber);\n    let japaneseLeftOver = japaneseNumber % tableNumber;\n    console.log(foreignerPerTable + \" \" + foreignerLeftOver);\n    console.log(japanesePerTable + \" \" + japaneseLeftOver);\n    console.log(tableNumber);\n\n    for (let i = 0; i < tableNumber; ++i) {\n      let newObject = {\n        foreigner: 0,\n        japanese: 0\n      };\n\n      if (foreignerNumber >= 1) {\n        newObject[\"foreigner\"] = foreignerPerTable;\n      }\n\n      if (japaneseNumber >= 1) {\n        newObject[\"japanese\"] = japanesePerTable;\n      }\n\n      if (foreignerLeftOver >= 1) {\n        newObject[\"foreigner\"] += 1;\n        foreignerLeftOver -= 1;\n      }\n\n      if (japaneseLeftOver >= 1) {\n        newObject[\"japanese\"] += 1;\n        japaneseLeftOver -= 1;\n      }\n\n      listMapping.push(newObject);\n    }\n\n    console.log(listMapping);\n    setTableMapping(listMapping); //create the tabel seating\n\n    let newTableSeating = JSON.stringify(createTableSlots(listMapping)); //create json object to store into firebase\n\n    db.collection(\"shuffle\").doc(\"shuffle-time-table\").update({\n      json: newTableSeating\n    });\n  }\n\n  function createTableSlots(listMapping) {\n    let rows = [];\n    let innerRow = [];\n    let tableMapLength = listMapping.length;\n    let foreignerList = Array.from({\n      length: foreignerNumber\n    }, (v, k) => k + 1);\n    let japaneseList = Array.from({\n      length: japaneseNumber\n    }, (v, k) => k + 1);\n    let colNumber = Math.floor(tableMapLength / 5);\n    let japaneseArray = [];\n    let foreignerArray = [];\n    let randomNumber = 0;\n    let tableSeating = {};\n    const tableNames = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"];\n    let tableIterator = 0;\n    console.log(listMapping);\n\n    for (let i = 0; i < tableMapLength; ++i) {\n      tableSeating[tableNames[tableIterator]] = [];\n\n      for (let j = 0; j < listMapping[i].japanese; ++j) {\n        randomNumber = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n        console.log(randomNumber);\n        let newJapaneseEntry = japaneseList[randomNumber];\n        japaneseArray.push(newJapaneseEntry);\n        japaneseList.splice(randomNumber, 1);\n        tableSeating[tableNames[tableIterator]].push(newJapaneseEntry + \"J\");\n      }\n\n      for (let j = 0; j < listMapping[i].foreigner; ++j) {\n        randomNumber = Math.floor(Math.random() * (foreignerList.length - 1 + 1)) + 0;\n        console.log(randomNumber);\n        let newForeignerEntry = foreignerList[randomNumber];\n        foreignerArray.push(foreignerList[randomNumber]);\n        foreignerList.splice(randomNumber, 1);\n        tableSeating[tableNames[tableIterator]].push(newForeignerEntry + \"F\");\n      }\n\n      japaneseArray = [];\n      foreignerArray = [];\n      tableIterator++;\n    }\n\n    console.log(tableSeating);\n    setTableSeating(tableSeating);\n    return tableSeating;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"student-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"List of Attendees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleTableGeneration,\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(ShuffleTimeList, {\n                setShuffleList: setJapaneseNumber,\n                participant: \"japanese\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(ShuffleTimeList, {\n                setShuffleList: setForeignerNumber,\n                participant: \"foreigner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(ShuffleTimeDropdown, {\n                setTableNumber: setTableNumber\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(ShuffleTimeCardContainer, {\n              tableSeating: tableSeating\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ShuffleTimeContainer, \"gLIFFSqIvHBoaHxyDyA4zrGjK/s=\");\n\n_c = ShuffleTimeContainer;\nexport default ShuffleTimeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShuffleTimeContainer\");","map":{"version":3,"sources":["/Users/johnli/Documents/meetup_projects/shuffle-time2/front_end/src/components/ShuffleTimeContainer.js"],"names":["React","useState","useEffect","ShuffleTimeList","ShuffleTimeDropdown","ShuffleTimeCardContainer","Form","Container","Row","Col","Button","db","ShuffleTimeContainer","props","japaneseNumber","setJapaneseNumber","foreignerNumber","setForeignerNumber","tableNumber","setTableNumber","tableMapping","setTableMapping","tableSeating","setTableSeating","errorMessage","setErrorMessage","collection","doc","get","then","console","log","data","json","newJson","newTableSeatings","JSON","parse","checkErrorMessage","handleTableGeneration","e","preventDefault","tempForeignerList","length","tempJapaneseList","tempTableList","finalList","listMapping","foreignerPerTable","Math","floor","foreignerLeftOver","japanesePerTable","japaneseLeftOver","i","newObject","foreigner","japanese","push","newTableSeating","stringify","createTableSlots","update","rows","innerRow","tableMapLength","foreignerList","Array","from","v","k","japaneseList","colNumber","japaneseArray","foreignerArray","randomNumber","tableNames","tableIterator","j","random","newJapaneseEntry","splice","newForeignerEntry"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ShuffleTimeList from './ShuffleTimeList';\nimport ShuffleTimeDropdown from './ShuffleTimeDropdown';\nimport ShuffleTimeCardContainer from './ShuffleTimeCardContainer';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport '../styles/ShuffleTimeContainer.css';\nimport {db} from '../firebase/fbConfig.js';\n\nconst ShuffleTimeContainer = (props) => {\n\n    const [japaneseNumber, setJapaneseNumber] = useState(0);\n    const [foreignerNumber, setForeignerNumber] = useState(0);\n    const [tableNumber, setTableNumber] = useState(0);\n    const [tableMapping, setTableMapping] = useState(0);\n    const [tableSeating, setTableSeating] = useState(0);\n    // const [finalList, setFinalList] = useState([]);\n    // const [editMode, setEditMode] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    useEffect(() => {\n        db.collection(\"shuffle\").doc(\"shuffle-time-table\")\n        .get()\n        .then((doc) => {\n            console.log(doc.data().json);\n            let newJson = doc.data();\n            if(newJson === \"\") {\n\n            }\n            else {\n                let newTableSeatings = JSON.parse(newJson);\n                console.log(newTableSeatings);\n            }\n        });\n    }, []);\n\n    //check if errorMessage is not empty\n    function checkErrorMessage () {\n        return errorMessage ? true : false;\n    }\n\n    function handleTableGeneration (e) {\n        e.preventDefault();\n\n        let tempForeignerList = [];\n        tempForeignerList.length = foreignerNumber;\n\n        let tempJapaneseList = [];\n        tempJapaneseList.length = japaneseNumber;\n\n        let tempTableList = [];\n        tempTableList.length = 0;\n\n        let finalList = [];\n        finalList.length = tempTableList.length;\n\n        let listMapping = [];\n\n        let foreignerPerTable = Math.floor(foreignerNumber / tableNumber);\n        let foreignerLeftOver = foreignerNumber % tableNumber;\n\n        let japanesePerTable = Math.floor(japaneseNumber / tableNumber);\n        let japaneseLeftOver = japaneseNumber % tableNumber;\n\n        console.log(foreignerPerTable + \" \" + foreignerLeftOver);\n        console.log(japanesePerTable + \" \" + japaneseLeftOver);\n        console.log(tableNumber);\n\n        for (let i = 0; i < tableNumber; ++i) {\n            let newObject = {foreigner: 0, japanese: 0};\n            if(foreignerNumber >= 1) {\n                newObject[\"foreigner\"] = foreignerPerTable;\n            }\n            if(japaneseNumber >= 1) {\n                newObject[\"japanese\"] = japanesePerTable;\n            }\n            if(foreignerLeftOver >= 1) {\n                newObject[\"foreigner\"] += 1;\n                foreignerLeftOver -= 1;\n            }\n            if(japaneseLeftOver >= 1) {\n                newObject[\"japanese\"] += 1;\n                japaneseLeftOver -= 1;\n            }\n\n            listMapping.push(newObject);\n        }\n        console.log(listMapping);\n        setTableMapping(listMapping);\n\n        //create the tabel seating\n        let newTableSeating = JSON.stringify(createTableSlots(listMapping));\n\n        //create json object to store into firebase\n        db.collection(\"shuffle\").doc(\"shuffle-time-table\").update({\n            json: newTableSeating\n        });\n    }\n\n    function createTableSlots(listMapping) {\n        let rows = [];\n        let innerRow = [];\n        let tableMapLength = listMapping.length;\n        let foreignerList = Array.from({length: foreignerNumber}, (v, k) => k+1); \n        let japaneseList = Array.from({length: japaneseNumber}, (v, k) => k+1); \n        let colNumber = Math.floor(tableMapLength / 5);\n        let japaneseArray = [];\n        let foreignerArray = [];\n        let randomNumber = 0;\n        let tableSeating = {};\n\n        const tableNames = [\n            \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"\n        ]\n        let tableIterator = 0; \n        console.log(listMapping);\n        for (let i = 0; i < tableMapLength; ++i) {\n            tableSeating[tableNames[tableIterator]] = [];\n\n            for (let j = 0; j < listMapping[i].japanese; ++j) {\n                randomNumber = Math.floor(Math.random() * (japaneseList.length - 1 + 1)) + 0;\n                console.log(randomNumber);\n                \n                let newJapaneseEntry = japaneseList[randomNumber];\n                japaneseArray.push(newJapaneseEntry);\n                japaneseList.splice(randomNumber, 1);\n                \n                tableSeating[tableNames[tableIterator]].push(newJapaneseEntry + \"J\");\n            }\n            for (let j = 0; j < listMapping[i].foreigner; ++j) {\n                randomNumber = Math.floor(Math.random() * (foreignerList.length - 1 + 1)) + 0;\n                console.log(randomNumber);\n\n                let newForeignerEntry = foreignerList[randomNumber];\n                foreignerArray.push(foreignerList[randomNumber]);\n                foreignerList.splice(randomNumber, 1);\n\n                tableSeating[tableNames[tableIterator]].push(newForeignerEntry + \"F\");\n            }\n\n            japaneseArray = [];\n            foreignerArray = [];\n            tableIterator++;  \n        }\n\n        console.log(tableSeating);\n        setTableSeating(tableSeating);\n\n        return tableSeating;\n    }\n\n    return (\n        <div>\n            <div className=\"student-container\">\n                <h1>List of Attendees</h1>\n                <Form onSubmit={handleTableGeneration}>\n                    <Container>\n                        <Row>\n                            <Col>\n                                <ShuffleTimeList setShuffleList={setJapaneseNumber} participant=\"japanese\"/>\n                            </Col>\n                            <Col>\n                                <ShuffleTimeList  setShuffleList={setForeignerNumber} participant=\"foreigner\"/>\n                            </Col>\n                            <Col>\n                                <ShuffleTimeDropdown setTableNumber={setTableNumber} />\n                            </Col>\n                            <Col>\n                                <Button variant=\"primary\" type=\"submit\">\n                                    Submit\n                                </Button>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <ShuffleTimeCardContainer tableSeating={tableSeating} />\n                        </Row>\n                    </Container>\n                </Form>\n            </div>\n        </div>\n    )\n};\n\nexport default ShuffleTimeContainer;\n"]},"metadata":{},"sourceType":"module"}